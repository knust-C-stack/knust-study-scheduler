@page "/"

@using System.Net.Http
@using System.Net.Http.Json
@using System.Threading.Tasks
@inject HttpClient Http
@inject NavigationManager Navigation
@using MudBlazor

<PageTitle>Home</PageTitle>

<h1 style="color: green;">Groups</h1>

@if (groups == null)
{
    <MudProgressCircular Indeterminate="true" />
}
else if (groups.Length == 0)
{
    <MudText>No groups found.</MudText>
}
else
{
    <MudTable Items="groups" Hover="true">
        <HeaderContent>
            <MudTh Style="font-weight: bold; color: green;">Name</MudTh>
            <MudTh Style="font-weight: bold; color: green;">Description</MudTh>
            <MudTh Style="font-weight: bold; color: green;">Created By</MudTh>
            <MudTh Style="font-weight: bold; color: green;">Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Description">@context.Description</MudTd>
            <MudTd DataLabel="Created By">@context.CreatedBy</MudTd>
            <MudTd DataLabel="Actions">
                <MudButton Color="Color.Primary" OnClick="@(() => UpdateGroup(@context.Id))" StartIcon="@Icons.Material.Filled.Edit">Update</MudButton>
                <MudButton Color="Color.Error" OnClick="@(() => DeleteGroup(@context.Id))" StartIcon="@Icons.Material.Filled.Delete">Delete</MudButton>
            </MudTd>
        </RowTemplate>
    </MudTable>
}

<MudAlert Severity="Severity.Success" IsVisible="successMessageVisible">@successMessage</MudAlert>
<MudAlert Severity="Severity.Error" IsVisible="errorMessageVisible">@errorMessage</MudAlert>

@code {
    private GroupDTO[] groups;
    private string successMessage;
    private string errorMessage;
    private bool successMessageVisible;
    private bool errorMessageVisible;

    protected override async Task OnInitializedAsync()
    {
        await LoadGroups();
    }

    private async Task LoadGroups()
    {
        try
        {
            groups = await Http.GetFromJsonAsync<GroupDTO[]>("http://localhost:5132/api/Groups");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private void UpdateGroup(int id)
    {
        // Navigate to the update page
        Navigation.NavigateTo($"/update-group/{id}");
    }

    private async Task DeleteGroup(int id)
    {
        try
        {
            var response = await Http.DeleteAsync($"http://localhost:5132/api/Groups/{id}");
            if (response.IsSuccessStatusCode)
            {
                successMessage = "Group deleted successfully!";
                successMessageVisible = true;
                errorMessageVisible = false;
                // Reload the groups list after a successful delete
                await LoadGroups();
            }
            else
            {
                errorMessage = "Error deleting the group.";
                errorMessageVisible = true;
                successMessageVisible = false;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
            errorMessageVisible = true;
            successMessageVisible = false;
        }
    }

    public void Dispose()
    {
        // Dispose of any resources if necessary
    }

    public class GroupDTO
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public string CreatedBy { get; set; }
    }
}

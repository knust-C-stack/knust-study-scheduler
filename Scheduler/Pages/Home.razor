@page "/"

@using System.Net.Http
@using System.Net.Http.Json
@using System.Threading.Tasks
@inject HttpClient Http
@inject NavigationManager Navigation
@implements IDisposable

<PageTitle>Home</PageTitle>

<h1>Groups</h1>

@if (groups == null)
{
    <p><em>Loading...</em></p>
}
else if (groups.Length == 0)
{
    <p>No groups found.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th>Created By</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var group in groups)
            {
                <tr>
                    <td>@group.Name</td>
                    <td>@group.Description</td>
                    <td>@group.CreatedBy</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => UpdateGroup(group.Id)">Update</button>
                        <button class="btn btn-danger" @onclick="() => DeleteGroup(group.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private GroupDTO[] groups;

    protected override async Task OnInitializedAsync()
    {
        await LoadGroups();
    }

    private async Task LoadGroups()
    {
        try
        {
            groups = await Http.GetFromJsonAsync<GroupDTO[]>("http://localhost:5132/api/Groups");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private void UpdateGroup(int id)
    {
        // Navigate to the update page
        Navigation.NavigateTo($"/update-group/{id}");
    }

    private async Task DeleteGroup(int id)
    {
        try
        {
            var response = await Http.DeleteAsync($"http://localhost:5132/api/Groups/{id}");
            if (response.IsSuccessStatusCode)
            {
                // Reload the groups list after a successful delete
                await LoadGroups();
            }
            else
            {
                Console.WriteLine("Error deleting the group");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    public void Dispose()
    {
        // Dispose of any resources if necessary
    }

    public class GroupDTO
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public string CreatedBy { get; set; }
    }
}

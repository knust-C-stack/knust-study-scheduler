@page "/creategroup"
@inject NavigationManager Navigation
@inject IJSRuntime JS

<PageTitle>Create Group</PageTitle>

<h1>Create a New Group</h1>

@if (successMessage != null)
{
    <div class="alert alert-success mt-3">@successMessage</div>
}
@if (errorMessage != null)
{
    <div class="alert alert-danger mt-3">@errorMessage</div>
}

<EditForm Model="newGroup" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="name" class="form-label">Name</label>
        <InputText id="name" class="form-control" @bind-Value="newGroup.Name" />
    </div>
    <div class="mb-3">
        <label for="description" class="form-label">Description</label>
        <InputText id="description" class="form-control" @bind-Value="newGroup.Description" />
    </div>
    <div class="mb-3">
        <label for="createdBy" class="form-label">Created By</label>
        <InputText id="createdBy" class="form-control" @bind-Value="newGroup.CreatedBy" />
    </div>

    <button type="submit" class="btn btn-primary">Create Group</button>
</EditForm>

@code {
    private GroupDTO newGroup = new GroupDTO();
    private string successMessage;
    private string errorMessage;
    private bool isOnline = true;

    [Inject] private HttpClient Http { get; set; }

    protected override async Task OnInitializedAsync()
    {
        isOnline = await JS.InvokeAsync<bool>("localStorageHelper.isOnline");
        await SyncPendingSubmissions();
    }

    private async Task HandleValidSubmit()
    {
        if (isOnline)
        {
            try
            {
                var response = await Http.PostAsJsonAsync("http://localhost:5132/api/Groups", newGroup);

                if (response.IsSuccessStatusCode)
                {
                    successMessage = "Group created successfully!";
                    newGroup = new GroupDTO(); // Reset the form
                    Navigation.NavigateTo("/");
                }
                else
                {
                    errorMessage = "Error creating group.";
                }
            }
            catch (Exception ex)
            {
                errorMessage = $"Error: {ex.Message}";
            }
        }
        else
        {
            var groupJson = System.Text.Json.JsonSerializer.Serialize(newGroup);
            await JS.InvokeVoidAsync("localStorageHelper.savePendingSubmission", groupJson);
            successMessage = "You are offline. The group will be added when you are back online.";
            newGroup = new GroupDTO(); // Reset the form
        }
    }

    [JSInvokable]
    public async Task SetOnlineStatus(bool status)
    {
        isOnline = status;
        if (isOnline)
        {
            await SyncPendingSubmissions();
        }
    }

    private async Task SyncPendingSubmissions()
    {
        var pendingSubmissionsJson = await JS.InvokeAsync<string>("localStorageHelper.getPendingSubmissions");
        var pendingSubmissions = System.Text.Json.JsonSerializer.Deserialize<List<GroupDTO>>(pendingSubmissionsJson);

        if (pendingSubmissions != null && pendingSubmissions.Any())
        {
            foreach (var group in pendingSubmissions)
            {
                try
                {
                    var response = await Http.PostAsJsonAsync("http://localhost:5132/api/Groups", group);
                    if (!response.IsSuccessStatusCode)
                    {
                        throw new Exception("Failed to sync pending submission.");
                    }
                }
                catch (Exception ex)
                {
                    errorMessage = $"Error syncing data: {ex.Message}";
                }
            }

            await JS.InvokeVoidAsync("localStorageHelper.clearPendingSubmissions");
            successMessage = "Pending submissions have been synced.";
        }
    }

    public class GroupDTO
    {
        public string Name { get; set; }
        public string Description { get; set; }
        public string CreatedBy { get; set; }
    }
}

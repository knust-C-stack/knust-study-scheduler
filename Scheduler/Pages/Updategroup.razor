@page "/update-group/{Id:int}"
@using System.Net.Http
@using System.Net.Http.Json
@using System.Threading.Tasks
@inject HttpClient Http
@inject NavigationManager Navigation
@implements IDisposable

<PageTitle>Update Group</PageTitle>

<h3>Update Group</h3>

@if (loading)
{
    <p><em>Loading...</em></p>
}
else if (errorMessage != null)
{
    <div class="alert alert-danger">@errorMessage</div>
}
else if (group == null)
{
    <p>Group not found.</p>
}
else
{
    <EditForm Model="group" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="name">Name</label>
            <InputText id="name" class="form-control" @bind-Value="group.Name" />
        </div>

        <div class="form-group">
            <label for="description">Description</label>
            <InputText id="description" class="form-control" @bind-Value="group.Description" />
        </div>

        <div class="form-group">
            <label for="createdBy">Created By</label>
            <InputText id="createdBy" class="form-control" @bind-Value="group.CreatedBy" />
        </div>

        <button type="submit" class="btn btn-primary">Update</button>
    </EditForm>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private GroupDTO group;
    private bool loading = true;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadGroup();
    }

    private async Task LoadGroup()
    {
        try
        {
            group = await Http.GetFromJsonAsync<GroupDTO>($"http://localhost:5132/api/Groups/{Id}");
            if (group == null)
            {
                errorMessage = "Group not found.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading group: {ex.Message}";
        }
        finally
        {
            loading = false;
        }
    }

    private async Task HandleValidSubmit()
    {
        errorMessage = null;

        try
        {
            var response = await Http.PutAsJsonAsync($"http://localhost:5132/api/Groups/{Id}", group);

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Group updated successfully. group");
                Console.WriteLine("group group group", group);
                Navigation.NavigateTo("/");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"Error updating the group: {response.ReasonPhrase}. Details: {errorContent}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Exception occurred during update: {ex.Message}";
        }
    }

    public void Dispose()
    {
        // Dispose of any resources if necessary
    }

    public class GroupDTO
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public string CreatedBy { get; set; }
    }
}

@page "/update-group/{id:int}"
@using System.Net.Http
@using System.Net.Http.Json
@using System.Threading.Tasks
@inject HttpClient Http
@inject NavigationManager Navigation
@implements IDisposable

<PageTitle>Update Group</PageTitle>

<h3>Update Group</h3>

@if (group == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="group" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="name">Name</label>
            <InputText id="name" class="form-control" @bind-Value="group.Name" />
        </div>

        <div class="form-group">
            <label for="description">Description</label>
            <InputText id="description" class="form-control" @bind-Value="group.Description" />
        </div>

        <div class="form-group">
            <label for="createdBy">Created By</label>
            <InputText id="createdBy" class="form-control" @bind-Value="group.CreatedBy" />
        </div>

        <button type="submit" class="btn btn-primary">Update</button>
    </EditForm>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private GroupDTO group;

    protected override async Task OnInitializedAsync()
    {
        await LoadGroup();
    }

    private async Task LoadGroup()
    {
        try
        {
            group = await Http.GetFromJsonAsync<GroupDTO>($"http://localhost:5132/api/Groups/{Id}");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var response = await Http.PutAsJsonAsync($"http://localhost:5132/api/Groups/{Id}", group);
            if (response.IsSuccessStatusCode)
            {
                // Navigate back to the list page or show a success message
                Navigation.NavigateTo("/");
            }
            else
            {
                Console.WriteLine("Error updating the group");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    public void Dispose()
    {
        // Dispose of any resources if necessary
    }

    public class GroupDTO
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public string CreatedBy { get; set; }
    }
}
